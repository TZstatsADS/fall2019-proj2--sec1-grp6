nbhd <- fread('../data/nbhd.csv')
##############Cleaning the raw data######################
#getting rid of data where BORO = 0
data_raw %<>% filter(`BORO` != '0')
df %<>% filter(`BORO` != '0')
df %<>% filter(`ZIPCODE` != 'N/A')
#########################################################
vio_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE','CRITICAL FLAG')])
##load zipcode and map data
# From https://data.cityofnewyork.us/Business/Zip-Code-Boundaries/i8iw-xf4u/data
NYCzipcodes <- readOGR("../data/ZIP_CODE_040114.shp",
#layer = "ZIP_CODE",
verbose = FALSE)
# selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% nbhd$ZIPCODE)
# selZip <- unionSpatialPolygons(selZip,nbhd$NEIGHBORHOOD[match(selZip$ZIPCODE,nbhd$ZIPCODE)])
########filter function for convenience##################
filterByCuisineBorough <- function(dataRaw, cuisine,borough,critFlag){
if ('All' %in% cuisine){
cuisineFilter <- unique(dataRaw$`CUISINE DESCRIPTION`)
}else{
cuisineFilter <- cuisine
}
if ('All' %in% borough){
boroFilter <- unique(dataRaw$BORO)
}else{
boroFilter <- borough
}
dataRaw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% critFlag,
`VIOLATION DESCRIPTION` != "")
}
filterByCuisineBorough2 <- function(dataRaw, cuisine,borough){
if ('All' %in% cuisine){
cuisineFilter <- unique(dataRaw$`CUISINE DESCRIPTION`)
}else{
cuisineFilter <- cuisine
}
if ('All' %in% borough){
boroFilter <- unique(dataRaw$BORO)
}else{
boroFilter <- borough
}
dataRaw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter)
}
########f################################################
##### Making a Zipcode List for map Boundaries ##########
## data from https://www.health.ny.gov/statistics/cancer/registry/appendix/neighborhoods.htm#
bronx_zip.df=c(10453, 10457, 10460,
10458, 10467, 10468,
10451, 10452, 10456,
10454, 10455, 10459, 10474,
10463, 10471,
10466, 10469, 10470, 10475,
10461, 10462,10464, 10465, 10472, 10473)
brook_zip.df =c(11212, 11213, 11216, 11233, 11238,
11209, 11214, 11228,
11204, 11218, 11219, 11230,
11234, 11236, 11239,
11223, 11224, 11229, 11235,
11201, 11205, 11215, 11217, 11231,
11203, 11210, 11225, 11226,
11207, 11208,
11211, 11222,
11220, 11232,
11206, 11221, 11237)
man_zip.df =c(10026, 10027, 10030, 10037, 10039,
10001, 10011, 10018, 10019, 10020,
10036, 10029, 10035,
10010, 10016, 10017, 10022,
10012, 10013, 10014,
10004, 10005, 10006, 10007, 10038, 10280,
10002, 10003, 10009,
10021, 10028, 10044, 10065, 10075, 10128,
10023, 10031, 10032, 10033, 10034, 10040)
queens_zip.df =c(11361, 11362, 11363, 11364,
11354, 11355, 11356, 11357, 11358, 11359, 11360,
11365, 11366, 11367,
11412, 11423, 11432, 11433, 11434, 11435, 11436,
11101, 11102, 11103, 11104, 11105, 11106,
11374, 11375, 11379, 11385,
11691, 11692, 11693, 11694, 11695, 11697,
11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429,
11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421,
11368, 11369, 11370, 11372, 11373, 11377, 11378)
staten_zip.df  =c(10302, 10303, 10310,
10306, 10307, 10308, 10309, 10312,
10301, 10304, 10305,
10314)
#Lists of all the zipcode that belong to each borough
bronx_zip.df<-as.data.frame(bronx_zip.df)
brook_zip.df<-as.data.frame(brook_zip.df)
man_zip.df<-as.data.frame(man_zip.df)
queens_zip.df<-as.data.frame(queens_zip.df)
staten_zip.df<-as.data.frame(staten_zip.df)
#give the column the name region(ZIPCODE) to make it easier to merge later
names(bronx_zip.df)<- "region"
names(brook_zip.df)<- "region"
names(man_zip.df)<- "region"
names(queens_zip.df)<- "region"
names(staten_zip.df)<- "region"
input
input <- list('cuisine1' = 'French','boro1' = 'Manhattan','cuisine2' = 'Chinese','boro2' = 'Manhattan','critFlag' = 'Y','variable' = 'A', 'speech1' = 'Chinese','speech2' = 'Manhattan','cuisinemap' = 'Chinese','boromap' = 'Manhattan')
#get unique restaurants and get the most current date's row for each restraunt
data_sub <- filterByCuisineBorough2(data_raw,input$cuisinemap,input$boromap)
unique_Restaurant <- data_sub %>% filter(!is.na(SCORE),SCORE != "",ZIPCODE %in% as.character(nbhd$ZIPCODE)) %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
unique_Restaurant$NEIGHBORHOOD <- nbhd$NEIGHBORHOOD[match(unique_Restaurant$ZIPCODE,as.character(nbhd$ZIPCODE))]
count.df<- unique_Restaurant%>%
group_by(NEIGHBORHOOD)%>%
summarise(
value=signif(mean(SCORE), digits = 4),
count = n()
)
selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% as.numeric(unique(unique_Restaurant$ZIPCODE)))
selZip <- unionSpatialPolygons(selZip,nbhd$NEIGHBORHOOD[match(selZip$ZIPCODE,nbhd$ZIPCODE)])
subdat <- subset(subdat,names(subdat) %in% count.df.sel$NEIGHBORHOOD)
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(selZip, CRS("+init=epsg:4326"))
subdat_data <- data.frame(NEIGHBORHOOD = names(subdat),value = count.df$value[match(names(subdat),count.df$NEIGHBORHOOD)],
count = count.df$count[match(names(subdat),count.df$NEIGHBORHOOD)])
rownames(subdat_data) <- names(subdat)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat <- SpatialPolygonsDataFrame(subdat,data = subdat_data)
popup1 <- paste0('<strong>Neighborhood: </strong><br>', subdat@data$NEIGHBORHOOD,
'<br><strong>Score: </strong><br>', subdat@data$value,
'<br><strong>Count: </strong><br>', subdat@data$count)
#get unique restaurants and get the most current date's row for each restraunt
data_sub <- filterByCuisineBorough2(data_raw,input$cuisinemap,input$boromap)
unique_Restaurant <- data_sub %>% filter(!is.na(SCORE),SCORE != "",ZIPCODE %in% as.character(nbhd$ZIPCODE)) %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
unique_Restaurant$NEIGHBORHOOD <- nbhd$NEIGHBORHOOD[match(unique_Restaurant$ZIPCODE,as.character(nbhd$ZIPCODE))]
count.df<- unique_Restaurant%>%
group_by(NEIGHBORHOOD)%>%
summarise(
value=signif(mean(SCORE), digits = 4),
count = n()
)
selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% as.numeric(unique(unique_Restaurant$ZIPCODE)))
selZip <- unionSpatialPolygons(selZip,nbhd$NEIGHBORHOOD[match(selZip$ZIPCODE,nbhd$ZIPCODE)])
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(selZip, CRS("+init=epsg:4326"))
subdat_data <- data.frame(NEIGHBORHOOD = names(subdat),value = count.df$value[match(names(subdat),count.df$NEIGHBORHOOD)],
count = count.df$count[match(names(subdat),count.df$NEIGHBORHOOD)])
rownames(subdat_data) <- names(subdat)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat <- SpatialPolygonsDataFrame(subdat,data = subdat_data)
popup1 <- paste0('<strong>Neighborhood: </strong><br>', subdat@data$NEIGHBORHOOD,
'<br><strong>Score: </strong><br>', subdat@data$value,
'<br><strong>Count: </strong><br>', subdat@data$count)
pal <- colorNumeric(
palette = "Blue",
domain = subdat$value
)
leaflet(subdat) %>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.7,
color = ~pal(value),
popup = popup1
) %>%
addLegend("bottomright", pal = pal, values = ~value,
title = "Average Score By Neighborhood",
opacity = 1
)
input <- list('cuisine1' = 'French','boro1' = 'Manhattan','cuisine2' = 'Chinese','boro2' = 'Manhattan','critFlag' = 'Y','variable' = 'A', 'speech1' = 'Chinese','speech2' = 'Manhattan','cuisinemap' = 'All','boromap' = 'All')
#get unique restaurants and get the most current date's row for each restraunt
data_sub <- filterByCuisineBorough2(data_raw,input$cuisinemap,input$boromap)
unique_Restaurant <- data_sub %>% filter(!is.na(SCORE),SCORE != "",ZIPCODE %in% as.character(nbhd$ZIPCODE)) %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
unique_Restaurant$NEIGHBORHOOD <- nbhd$NEIGHBORHOOD[match(unique_Restaurant$ZIPCODE,as.character(nbhd$ZIPCODE))]
count.df<- unique_Restaurant%>%
group_by(NEIGHBORHOOD)%>%
summarise(
value=signif(mean(SCORE), digits = 4),
count = n()
)
count.df
selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% as.numeric(unique(unique_Restaurant$ZIPCODE)))
selZip <- unionSpatialPolygons(selZip,nbhd$NEIGHBORHOOD[match(selZip$ZIPCODE,nbhd$ZIPCODE)])
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(selZip, CRS("+init=epsg:4326"))
subdat_data <- data.frame(NEIGHBORHOOD = names(subdat),value = count.df$value[match(names(subdat),count.df$NEIGHBORHOOD)],
count = count.df$count[match(names(subdat),count.df$NEIGHBORHOOD)])
rownames(subdat_data) <- names(subdat)
subdat <- SpatialPolygonsDataFrame(subdat,data = subdat_data)
popup1 <- paste0('<strong>Neighborhood: </strong><br>', subdat@data$NEIGHBORHOOD,
'<br><strong>Score: </strong><br>', subdat@data$value,
'<br><strong>Count: </strong><br>', subdat@data$count)
pal <- colorNumeric(
palette = "Blue",
domain = subdat$value
)
leaflet(subdat) %>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.7,
color = ~pal(value),
popup = popup1
) %>%
addLegend("bottomright", pal = pal, values = ~value,
title = "Average Score By Neighborhood",
opacity = 1
)
?addPolygons
pal(subdat$value)
subdat$value
colorNumeric
?colorNumeric
colorNumeric("Blue",c(1:100))
colorNumeric("Blue",c(1:100))[c(0.3,0.4)]
a <- colorNumeric("Blue",c(1:100))
a(c(0.4,10.3,5.8))
min(subdat$value)
pal <- colorNumeric(
palette = "Blue",
domain = seq(min(subdat$value),max(subdat$value),length(subdat$value))
)
pal(subdat$value)
pal(value)
subdat$value
seq(min(subdat$value),max(subdat$value),length(subdat$value))
sort(subdat$value)
pal <- colorNumeric(
palette = "Blue",
domain = sort(subdat$value)
)
pal(subdat$value)
pal(3)
pal(c(3,4))
pal(c(3,4,10))
pal
pal <- colorNumeric(
palette = "blue",
domain = sort(subdat$value)
)
leaflet(subdat) %>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.7,
color = ~pal(value),
popup = popup1
) %>%
addLegend("bottomright", pal = pal, values = ~value,
title = "Average Score By Neighborhood",
opacity = 1
)
pal
pf(1)
pal(subdat$value)
pal <- colorNumeric(
palette = "Blues",
domain = sort(subdat$value)
)
leaflet(subdat) %>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.7,
color = ~pal(value),
popup = popup1
) %>%
addLegend("bottomright", pal = pal, values = ~value,
title = "Average Score By Neighborhood",
opacity = 1
)
pal <- colorNumeric(
palette = "Reds",
domain = sort(subdat$value)
)
leaflet(subdat) %>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.5,
color = ~pal(value),
popup = popup1
) %>%
addLegend("bottomright", pal = pal, values = ~value,
title = "Average Score By Neighborhood",
opacity = 1
)
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
setwd('C:/Users/wwyws/OneDrive/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue Doc')
library(shiny)
library(DT)
library(data.table)
library(magrittr)
library(tidyverse)
library(plotly)
library(formattable)
library(RColorBrewer)
library(leaflet)
library(tigris)
library(rgdal)
library(Rcpp)
library(gpclib)
gpclibPermit()
data_raw_1 <- fread('../data/Raw Data 1.csv')
data_raw_2 <- fread('../data/Raw Data 2.csv')
data_raw <- rbind(data_raw_1,data_raw_2)
df<- data_raw
colnames(df)
df <- df[,c('DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
View(df)
df <- df[,c('CAMIS','DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
df<- data_raw
df <- df[,c('CAMIS','DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
input <- list('cuisine1' = 'French','boro1' = 'Manhattan','cuisine2' = 'Chinese','boro2' = 'Manhattan','critFlag' = 'Y','variable' = 'A', 'speech1' = 'Chinese','speech2' = 'Manhattan','cuisinemap' = 'All','boromap' = 'All')
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
library(shiny)
library(DT)
library(data.table)
library(magrittr)
library(tidyverse)
library(plotly)
library(formattable)
library(RColorBrewer)
library(leaflet)
library(tigris)
library(rgdal)
library(Rcpp)
library(gpclib)
gpclibPermit()
data_raw_1 <- fread('../data/Raw Data 1.csv')
data_raw_2 <- fread('../data/Raw Data 2.csv')
data_raw <- rbind(data_raw_1,data_raw_2)
df<- data_raw
df <- df[,c('CAMIS','DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
nbhd <- fread('../data/nbhd.csv')
##############Cleaning the raw data######################
#getting rid of data where BORO = 0
data_raw %<>% filter(`BORO` != '0')
df %<>% filter(`BORO` != '0')
df %<>% filter(`ZIPCODE` != 'N/A')
#########################################################
vio_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE','CRITICAL FLAG')])
##load zipcode and map data
# From https://data.cityofnewyork.us/Business/Zip-Code-Boundaries/i8iw-xf4u/data
NYCzipcodes <- readOGR("../data/ZIP_CODE_040114.shp",
#layer = "ZIP_CODE",
verbose = FALSE)
# selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% nbhd$ZIPCODE)
# selZip <- unionSpatialPolygons(selZip,nbhd$NEIGHBORHOOD[match(selZip$ZIPCODE,nbhd$ZIPCODE)])
########filter function for convenience##################
filterByCuisineBorough <- function(dataRaw, cuisine,borough,critFlag){
if ('All' %in% cuisine){
cuisineFilter <- unique(dataRaw$`CUISINE DESCRIPTION`)
}else{
cuisineFilter <- cuisine
}
if ('All' %in% borough){
boroFilter <- unique(dataRaw$BORO)
}else{
boroFilter <- borough
}
dataRaw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% critFlag,
`VIOLATION DESCRIPTION` != "")
}
filterByCuisineBorough2 <- function(dataRaw, cuisine,borough){
if ('All' %in% cuisine){
cuisineFilter <- unique(dataRaw$`CUISINE DESCRIPTION`)
}else{
cuisineFilter <- cuisine
}
if ('All' %in% borough){
boroFilter <- unique(dataRaw$BORO)
}else{
boroFilter <- borough
}
dataRaw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter)
}
########f################################################
##### Making a Zipcode List for map Boundaries ##########
## data from https://www.health.ny.gov/statistics/cancer/registry/appendix/neighborhoods.htm#
bronx_zip.df=c(10453, 10457, 10460,
10458, 10467, 10468,
10451, 10452, 10456,
10454, 10455, 10459, 10474,
10463, 10471,
10466, 10469, 10470, 10475,
10461, 10462,10464, 10465, 10472, 10473)
brook_zip.df =c(11212, 11213, 11216, 11233, 11238,
11209, 11214, 11228,
11204, 11218, 11219, 11230,
11234, 11236, 11239,
11223, 11224, 11229, 11235,
11201, 11205, 11215, 11217, 11231,
11203, 11210, 11225, 11226,
11207, 11208,
11211, 11222,
11220, 11232,
11206, 11221, 11237)
man_zip.df =c(10026, 10027, 10030, 10037, 10039,
10001, 10011, 10018, 10019, 10020,
10036, 10029, 10035,
10010, 10016, 10017, 10022,
10012, 10013, 10014,
10004, 10005, 10006, 10007, 10038, 10280,
10002, 10003, 10009,
10021, 10028, 10044, 10065, 10075, 10128,
10023, 10031, 10032, 10033, 10034, 10040)
queens_zip.df =c(11361, 11362, 11363, 11364,
11354, 11355, 11356, 11357, 11358, 11359, 11360,
11365, 11366, 11367,
11412, 11423, 11432, 11433, 11434, 11435, 11436,
11101, 11102, 11103, 11104, 11105, 11106,
11374, 11375, 11379, 11385,
11691, 11692, 11693, 11694, 11695, 11697,
11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429,
11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421,
11368, 11369, 11370, 11372, 11373, 11377, 11378)
staten_zip.df  =c(10302, 10303, 10310,
10306, 10307, 10308, 10309, 10312,
10301, 10304, 10305,
10314)
#Lists of all the zipcode that belong to each borough
bronx_zip.df<-as.data.frame(bronx_zip.df)
brook_zip.df<-as.data.frame(brook_zip.df)
man_zip.df<-as.data.frame(man_zip.df)
queens_zip.df<-as.data.frame(queens_zip.df)
staten_zip.df<-as.data.frame(staten_zip.df)
#give the column the name region(ZIPCODE) to make it easier to merge later
names(bronx_zip.df)<- "region"
names(brook_zip.df)<- "region"
names(man_zip.df)<- "region"
names(queens_zip.df)<- "region"
names(staten_zip.df)<- "region"
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
unique_Restaurant <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE)) %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
View(unique_Restaurant)
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
View(data_sub)
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
nbhd <- fread('../data/nbhd.csv')
df<- data_raw
df <- df[,c('CAMIS','DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
output$NYC_Restaurants <- renderDataTable(
#get unique restaurants and get the most current date's row for each restraunt
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
datatable(df%>%filter((df$'GRADE'  %in%  input$variable) & df$'CUISINE DESCRIPTION' == input$'speech1' & df$'BORO' == input$'speech2'
))%>%formatStyle('ZIPCODE',color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
output$NYC_Restaurants <- renderDataTable(
#get unique restaurants and get the most current date's row for each restraunt
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
datatable(df%>%filter((df$'GRADE'  %in%  input$variable) & df$'CUISINE DESCRIPTION' == input$'speech1' & df$'BORO' == input$'speech2'
))%>%formatStyle('ZIPCODE',color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "")
data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))
data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`)
data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE != "") %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
View(df)
df<- data_raw
df <- df[,c('CAMIS','DBA','BORO','BUILDING','STREET','ZIPCODE','PHONE','CUISINE DESCRIPTION','GRADE','INSPECTION DATE','Longitude','Latitude')]
data_sub <- filterByCuisineBorough2(df,input$speech1,input$speech2)
df <- data_sub %>% filter(ZIPCODE %in% as.character(nbhd$ZIPCODE),GRADE ==input$variable) %>% arrange(`CAMIS`,as.Date(`INSPECTION DATE`,'%m/%d/%Y'))%>% group_by(`CAMIS`) %>%
slice(n())
View(df)
datatable(df %>% formatStyle('ZIPCODE',color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
colnames(df)
df
datatable(df %>% formatStyle(`ZIPCODE``,color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df %>% formatStyle(`ZIPCODE`,color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df %>% formatStyle('ZIPCODE',color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df) %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black'),
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
)
datatable(df)
datatable(df) %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black')
datatable(df) %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black',
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df) %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black',
options = list(pageLength=5, scrollX = TRUE, scrollY = TRUE
))
datatable(df) %>% formatStyle(1:ncol(df),color='white',target='row',backgroundColor='black')
runApp('~/Columbia/STAT5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
