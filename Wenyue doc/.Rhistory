Sys.getenv()
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
fname
file.exists(fname)
file.exists("~/.Rprofile")
path.expand("~")
12.12312414
install.packages('ellipsis',type = 'source')
Sys.getenv()
Sys.getenv('PATH')
paste0(Sys.getenv("PATH"),"C:\\Program Files\\RTools\\bin;")
shiny::runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/app')
install.packages('leaflet')
install.packages('choroplethr')
install.packages('remotes')
install_version("choroplethrZip", "1.4.0")
install.packages('choroplethrZip')
getwd()
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
install.packages('shinythemes')
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
?navbarPage
runApp('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc/Restaurant_Violation')
library(shiny)
library(shinythemes)
library(DT)
library(data.table)
library(magrittr)
library(tidyverse)
getwd()
setwd('H:/Personal/Columbia/STAT 5243 Applied Data Science/fall2019-proj2--sec1-grp6/Wenyue doc')
?Fread
?fread
data_raw <- fread('../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
View(data_raw)
allCuisines <- unique(data_raw$`CUISINE DESCRIPTION`)
allCuisines
allCuisines <- sort(unique(data_raw$`CUISINE DESCRIPTION`))
allCuisines
colnames(data_raw)
data_raw %>% group_by(`CUISINE DESCRIPTION`) %>% summarise(Count = n)
data_raw %>% group_by(`CUISINE DESCRIPTION`) %>% summarise("Count" = n)
?summarise
data_raw %>% group_by(`CUISINE DESCRIPTION`)
data_raw %>% group_by(`CUISINE DESCRIPTION`) %>% summarise("Count" = n())
a <- data_raw %>% group_by(`CUISINE DESCRIPTION`) %>% summarise("Count" = n())
View(a)
a[order(a$Count),]
b <- a[order(a$Count),]
View(b)
allCuisines <- allCuisines[allCuisines != "Not Listed/Not Applicable"]
allCuisines
unique(data_raw$BORO)
data_raw %>% group_by(`BORO`) %>% summarise("Count" = n())
data_raw %<>% filter(`BORO` != '0')
allBoros <- unique(data_raw$BORO)
allBoros
?selectInput
data_raw$`CRITICAL FLAG`
unique(data_raw$`CRITICAL FLAG`)
unique(data_raw$`VIOLATION DESCRIPTION`[data_raw$`CRITICAL FLAG`==""])
q <- data_raw[data_raw$`CRITICAL FLAG`=="",]
View(q)
unique(q$`VIOLATION CODE`)
unique(q$`VIOLATION CODE`)[-1]
w <- unique(q$`VIOLATION CODE`)[-1]
e <- data_raw[data_raw$`VIOLATION CODE` %in% w,]
View(e)
unique(e$`VIOLATION DESCRIPTION`)
unique(data_raw$`INSPECTION TYPE`)
data_raw[data_raw$DBA=='SZECHUAN MOUNTAIN HOUSE',]
q <- data_raw[data_raw$DBA=='SZECHUAN MOUNTAIN HOUSE',]
View(q)
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
?absolutePanel
?renderplotly
?plot_ly
library(plotly)
install.packages('plotly')
library(plotly)
?sliderInput
runApp()
?datatable()
data_raw$`CRITICAL FLAG`
formatStyle
?formatStyle
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
?datatable()
runApp()
?formatStyle
runApp()
colnames(data_raw)
b <- datatable(data_raw)
colnames(b)
runApp()
runApp()
runApp()
?count
data_sub <- data_raw[1:10000,]
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(n())
View(vio_count)
cuisineFilter <- unique(data_raw$`CUISINE DESCRIPTION`)
boroFilter <- unique(data_raw$BORO)
input <- list('critFlag' = c('Y'))
input$critFlag
data_sub <- data_raw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% input$critFlag,
`VIOLATION DESCRIPTION` != "")
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(n())
View(vio_count)
?arrange''
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(Count = n()) %>% arrange(Count)
?arrange
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(Count = n()) %>% arrange(desc(Count),)
View(vio_count)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(Count = n()) %>% arrange(desc(Count))
runApp()
runApp()
vio_count$Count
vio_count$`VIOLATION DESCRIPTION`
vio_count$Count[1:10]
input$slider1 <- 10
plot_ly(
x = vio_count$Count[1:input$slider1],
y = vio_count$`VIOLATION DESCRIPTION`,
name = "Bigram",
type = "bar",
orientation = 'h'
)
vio_count$Count[1:input$slider1]
plot_ly(
x = vio_count$Count[1:input$slider1],
y = vio_count$`VIOLATION DESCRIPTION`[1:input$slider1],
name = "Bigram",
type = "bar",
orientation = 'h'
)
x_names <- vio_count$`VIOLATION DESCRIPTION`[1:input$slider1]
x_names <- factor(x_names,levels = rev(x_names))
plot_ly(
x = vio_count$Count[1:input$slider1],
y = x_names,
name = "Bigram",
type = "bar",
orientation = 'h'
)
vio_count
View(vio_count)
vio_count$Count
runApp()
unique(data_raw$`VIOLATION DESCRIPTION`)
data.frame(unique(data_raw$`VIOLATION DESCRIPTION`))
a <- data.frame(unique(data_raw$`VIOLATION DESCRIPTION`))
View(a)
a <- data.frame(unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE')]))
View(a)
a <- a[order(a$VIOLATION.CODE),]
a
View(a)
write.csv(a,'Violation Map.csv')
data_sub
colnames(data_sub)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(Count = n()) %>% arrange(desc(Count))
View(vio_count)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>% arrange(desc(`# of Cases`))
View(vio_count)
runApp()
runApp()
unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE')])
violation_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE')])
View(violation_map)
vio_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE')])
vio_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE')])
match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE'])
View(vio_count)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']) %>%
select(Code, Description = `VIOLATION DESCRIPTION`, `# of Cases`)
View(vio_map)
View(vio_count)
runApp()
data_sub <- data_raw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% input$critFlag,
`VIOLATION DESCRIPTION` != "")
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']) %>%
select(Code, Description = `VIOLATION DESCRIPTION`, `# of Cases`)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE'])
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE'])
vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE'])
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`))
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE'])
data_sub <- data_raw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% input$critFlag,
`VIOLATION DESCRIPTION` != "")
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`)) %>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']) %>%
select(Code, Description = `VIOLATION DESCRIPTION`, `# of Cases`)
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`))
vio_count %<>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']) %>%
select(Code, Description = `VIOLATION DESCRIPTION`, `# of Cases`)
runApp()
x_names <- vio_count$Code[1:input$slider1]
x_names <- factor(x_names,levels = rev(x_names))
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
name = "Bigram",
type = "bar",
orientation = 'h'
)
x_names
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = vio_count$`Description`[1:input$slider1],
name = "Bigram",
type = "bar",
orientation = 'h'
)
?plot_ly
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = vio_count$`Description`[1:input$slider1],
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
)
?hoverOpts()
y <- c('giraffes', 'orangutans', 'monkeys')
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(y, SF_Zoo, LA_Zoo)
p <- plot_ly(data, x = ~SF_Zoo, y = ~y, type = 'bar', orientation = 'h', name = 'SF Zoo',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = vio_count$`Description`[1:input$slider1],
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = vio_count$`Description`[1:input$slider1],
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
)
vio_count$`Description`[1:input$slider1]
vio_count$`Description`[1:input$slider1]
paste(x, ", ",xvio_count$`Description`[1:input$slider1])
paste(vio_count$`# of Cases`[1:input$slider1], ", ",xvio_count$`Description`[1:input$slider1])
paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1])
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)'
)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
substr(y,100)
substr(y,x_names)
substr(y,1,100)
substr(x_names,1,100)
substr( paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,100)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr( paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,100),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr( paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,150),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr( paste(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,125),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr(paste0(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,125),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
runApp()
?plotlyOutput
runApp()
?dataTableOutput()
runApp()
?formatStyle
?styleEqual
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:ncol(vio_count),color='grey',target='row',backgroundColor='black')
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:ncol(vio_count),color='grey',target='row')
styleColorBar(range(df), 'lightblue')
styleColorBar(range(vio_count), 'lightblue')
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:ncol(vio_count),target='row')
?formatStyle
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:2,target='row',fontWeight = 'bold')
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:2,target='cell',fontWeight = 'bold')
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:2,target='cell',fontWeight = c('normal','bold')
)
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:2,target='cell',fontWeight = c('normal','bold'))
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:2,target='cell',fontWeight = c('bold'))
runApp()
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE))
runApp()
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr(paste0(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,150),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'black',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr(paste0(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,150),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'black',
showlegend = FALSE)
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr(paste0(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,150),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
?tabPanel
runApp()
?tabPanel
runApp()
runApp()
?fluidPage
?column
?sidebarLayout
runApp()
runApp()
runApp()
runApp()
datatable(vio_count[1:input$slider1,],options = list(pageLength=min(input$slider1,10), scrollX = TRUE, scrollY = TRUE)) %>%
formatStyle(1:ncol(vio_count),color = 'black')
plot_ly(
x = vio_count$`# of Cases`[1:input$slider1],
y = x_names,
text = substr(paste0(vio_count$`# of Cases`[1:input$slider1], ", ",vio_count$`Description`[1:input$slider1]),1,150),
hoverinfo = 'text',
name = "Bigram",
type = "bar",
orientation = 'h',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(paper_bgcolor = 'rgba(245, 246, 249, 1)',
plot_bgcolor = 'rgba(245, 246, 249, 1)',
showlegend = FALSE)
?plotlyOutput
runApp()
runApp()
runApp()
View(data_sub)
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
vio_map <- unique(data_raw[,c('VIOLATION DESCRIPTION','VIOLATION CODE','CRITICAL FLAG')])
View(vio_map)
data_sub <- data_raw %>% filter(`CUISINE DESCRIPTION` %in% cuisineFilter,BORO %in% boroFilter,`CRITICAL FLAG` %in% input$critFlag,
`VIOLATION DESCRIPTION` != "")
vio_count <- data_sub %>% group_by(`VIOLATION DESCRIPTION`) %>% summarise(`# of Cases` = n()) %>%
arrange(desc(`# of Cases`))
vio_count %<>% mutate(Code = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'VIOLATION CODE']
,Critical = vio_map[match(vio_count$`VIOLATION DESCRIPTION`, vio_map$`VIOLATION DESCRIPTION`),'CRITICAL FLAG']) %>%
select(Code, Description = `VIOLATION DESCRIPTION`, `# of Cases`,`Critical`)
vio_count
runApp()
runApp()
runApp()
?tabPanel
?navbarPage
?p()
runApp()
runApp()
?navbarPage
runApp()
runApp()
